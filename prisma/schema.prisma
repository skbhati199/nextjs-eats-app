// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String        @id @default(cuid()) @map("id")
  email        String        @unique
  password     String
  name         String
  restaurants  Restaurant[]
  reviews      Review[]
  orders       Order[]
  transactions Transaction[]

  @@index([id])
}

model Restaurant {
  id        String    @id @default(cuid()) @map("id")
  name      String
  address   String
  cuisine   Cuisine?  @relation(fields: [cuisineId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  cuisineId String?
  isActive  Boolean   @default(false)
  createAt  DateTime? @default(now())
  updateAt  DateTime? @updatedAt()
  deleteAt  DateTime?

  owner        User?         @relation(fields: [ownerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  ownerId      String?
  menuItems    MenuItem[]
  reviews      Review[]
  orders       Order[]
  transactions Transaction[]

  @@index([ownerId, id])
}

model Cuisine {
  id          String       @id @default(cuid()) @map("id")
  name        String       @unique
  restaurants Restaurant[]
}

model MenuItem {
  id           String     @id @default(cuid()) @map("id")
  name         String
  price        Float      @default(0.0)
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  restaurantId String
  order        Order[]
}

model Review {
  id           String     @id @default(cuid()) @map("id")
  rating       Float      @default(0.0)
  comment      String
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId       String
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  restaurantId String
}

model Order {
  id           String     @id @default(cuid()) @map("id")
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId       String
  restaurant   Restaurant? @relation(fields: [restaurantId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  restaurantId String?

  menuItem      MenuItem?     @relation(fields: [menuItemId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  menuItemId    String?
  Transaction   Transaction? @relation(fields: [transactionId], references: [id])
  transactionId String?      @unique
  orderStatus   OrderStatus  @default(PENDING)
  createAt      DateTime?    @default(now())
  updateAt      DateTime?    @updatedAt()
}

model Transaction {
  id           String            @id @default(cuid()) @map("id")
  user         User              @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId       String
  restaurant   Restaurant        @relation(fields: [restaurantId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  restaurantId String
  order        Order?
  status       TransactionStatus @default(PENDING)
  createAt     DateTime?         @default(now())
  updateAt     DateTime?         @updatedAt()
}

enum OrderStatus {
  PENDING
  PREPRING
  DELIVERY
  COMPLETED
  REJECTED
}

enum TransactionStatus {
  COMPLETED
  PENDING
  FAILED
}
